spring:
  security:
    user: 
      name: daniel
      password: daniel
  profiles: peer3 
  application:
    name: serverdoo
    
server:
  port: ${PORT:8763}
eureka:
  client:
    registerWithEureka: true #needs to be true for replica mode
    fetchRegistry:  true #needs to be true for replica mode
    serviceUrl:
      defaultZone:  ${EUREKA_URL:http://daniel:daniel@peer1:8761/eureka/},${EUREKA_URL:http://daniel:daniel@peer2:8762/eureka/},${EUREKA_URL:http://daniel:daniel@peer3:8763/eureka/}
#this is to have eureka server expire the lease in case of a client unexpected close, don't do it in production!!
  server:
    enableSelfPreservation: true  
   
  instance:     
    appname: serverdoo
    preferIpAddress: false    
    hostname: peer3
    metadataMap:
      zone: zone3   
    
#run with gradlew bootRun --args='--spring.profiles.active=peer1,peer2,peer3' or peer1 only peer2 and so on; haven't tested altogether, try separately first
#run with java -jar --spring.profiles.active=peer1,peer2,peer3 or peer1 only peer2 and so on; haven't tested altogether, try separately first